# -*- coding: utf-8 -*-
"""
/***************************************************************************
 actualizacioncatastralv2
                                 A QGIS plugin
 actualizacioncatastralv2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-02-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by actualizacioncatastralv2
        email                : actualizacioncatastralv2
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSettings
from PyQt5.QtGui import QIcon, QColor
from PyQt5.QtWidgets import QAction, QMessageBox
from PyQt5 import QtWidgets
# Initialize Qt resources from file resources.py
from .resources import *
from qgis.core import *
from qgis.utils import iface
from qgis.gui import QgsLayerTreeView

# Import the code for the DockWidget
from .actualizacioncatastralv2_dockwidget import actualizacioncatastralv2DockWidget
import os.path
import os, json, requests
from osgeo import ogr, osr

class actualizacioncatastralv2:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'actualizacioncatastralv2_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&actualizacioncatastralv2')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'actualizacioncatastralv2')
        self.toolbar.setObjectName(u'actualizacioncatastralv2')

        #print "** INITIALIZING actualizacioncatastralv2"

        self.pluginIsActive = False
        self.dockwidget = None


    #Configuracion

    


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('actualizacioncatastralv2', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/actualizacioncatastralv2/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'actualizacioncatastralv2'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING actualizacioncatastralv2"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

########################################################################################################

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD actualizacioncatastralv2"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&actualizacioncatastralv2'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

 ########################################################################################################

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING actualizacioncatastralv2"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = actualizacioncatastralv2DockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            self.cuerpo = {"incluirGeom": "true", "pagina": None, "bbox": "false", "pin": "false", "geomWKT": None, "epsg": None, "properties": {}, "epsgGeomWKT": None, "itemsPagina": None, "nombre": "x"}
            self.headers = {'Content-Type': 'application/json'}
            self.payload = json.dumps(self.cuerpo)

            self.idManzana = ' '

            self.servidorIP = 'http://192.168.0.39:1093/'
            self.urlManzanas = self.servidorIP + 'api/manzana/'
            self.urlPredios = self.servidorIP + 'api/manzana/predios/'
            self.urlConstrucciones = self.servidorIP + 'api/manzana/construcciones/'
            self.urlHorizontales = self.servidorIP + 'api/manzana/deptoh/'
            self.urlVerticales = self.servidorIP + 'api/manzana/deptov/'
            self.urlClavesV = self.servidorIP + 'api/manzana/deptovcve/'

            self.obtenerIdManzana()
            #self.obtenerLocalidades()
            #self.dockwidget.comboLocalidad.currentIndexChanged.connect(self.obtenerSectoresPorLocalidad)
            #self.dockwidget.comboSector.currentIndexChanged.connect(self.obtenerManzanasPorSector)
            #self.dockwidget.comboManzana.currentIndexChanged.connect(self.obtenerIdManzana)
            self.dockwidget.botonCargar.clicked.connect(self.pintarCapas)

#######################################################################################################################

    def validarCombox(self):
        #return self.dockwidget.comboLocalidad.count() > 0 and self.dockwidget.comboSector.count() > 0 and self.dockwidget.comboManzana.count()
        return True

##########################################################################
    def obtenerIdManzana(self):

        #index = self.dockwidget.comboManzana.currentIndex()
        #self.idManzana = self.dockwidget.comboManzana.itemData(index)
        self.idManzana = '002055'
        #self.idManzana = '073999'

########################################################################################################################

    def obtenerLocalidades(self):

        self.dockwidget.comboLocalidad.clear()

        try:
            respuesta = requests.get('http://192.168.0.30:1093/api/combo/ixtlahuaca/localidades/')
        except requests.exceptions.RequestException:
            raise RuntimeError('Error de servidor')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            for localidad in respuesta.json():
                print (localidad)
                self.dockwidget.comboLocalidad.addItem(str(localidad['label']) + " " + localidad['other'], str(localidad['value']) )
        else:
            self.createAlert("No existen localidades registradas", QMessageBox().Information, "Cargar Localidades")

        #self.obtenerSectoresPorLocalidad()


#################################################################################################################################

    def obtenerSectoresPorLocalidad(self):

        if self.dockwidget.comboLocalidad.count() > 0:

            index = self.dockwidget.comboLocalidad.currentIndex()
            idSector = self.dockwidget.comboLocalidad.itemData(index)
            
            self.dockwidget.comboSector.clear()

            try:
                respuesta = requests.get('http://192.168.0.30:1093/api/combo/localidades/' + idSector + '/sector/')
            except requests.exceptions.RequestException:
                raise RuntimeError('Error de servidor')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:

                for sector in respuesta.json():
                    self.dockwidget.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label
            else:
                self.createAlert("No existen sectores en la localidad", QMessageBox().Information, "Cargar Sectores")
            
            #self.obtenerManzanasPorSector()

################################################################################################################################

    def obtenerManzanasPorSector(self):
    
        if self.dockwidget.comboSector.count() > 0:

            index = self.dockwidget.comboSector.currentIndex()
            idSector = self.dockwidget.comboSector.itemData(index)

            self.dockwidget.comboManzana.clear()

            try:
                respuesta = requests.get('http://192.168.0.30:1093/api/combo/sector/' + idSector + '/manzana/')
            except requests.exceptions.RequestException:
                raise RuntimeError('Error de servidor')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                for manzana in respuesta.json():
                    self.dockwidget.comboManzana.addItem(manzana['label'], manzana['other'])#Cambiar other por label
            else:
                self.createAlert("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")

##################################################################################################
    
    def pintarCapas(self):

        try:
            if self.validarCombox():

                self.vaciarCapa('manzana')
                self.vaciarCapa('predios')
                self.vaciarCapa('construcciones')
                self.vaciarCapa('horizontales')
                self.vaciarCapa('verticales')
                self.vaciarCapa('cves_verticales')

                self.pintarUnaCapa('manzana')
                #self.pintarUnaCapa('predios')
                #self.pintarUnaCapa('construcciones')
                #self.pintarUnaCapa('horizontales')
                self.pintarUnaCapa('verticales')
                #self.pintarUnaCapa('cves_verticales')
                self.zoomManzana()

            else:
                self.createAlert('No se han seleccionado manzanas para cargar', QMessageBox.Critical, 'Capas de consulta')

        except AttributeError:
            self.createAlert('No se han cargado las capas', QMessageBox.Critical, 'Capas de consulta')

########################################################################################################

    def pintarUnaCapa(self, nombreCapa):
        
        data = self.obtenerAPintar(nombreCapa)
        etiquetaField = ""
        colorCapa = ""

        if nombreCapa == "manzana":
            etiquetaField = "clave"
            colorCapa = QColor(255,0,0)
        elif nombreCapa == "predios":
            etiquetaField = "clave"
            colorCapa = QColor(0,255,0)
        elif nombreCapa == "construcciones":
            etiquetaField = "nom_volumen"
            colorCapa = QColor(0,0,0)
        elif nombreCapa == "horizontales":
            etiquetaField = "clave"
            colorCapa = QColor(230,230,0)
        elif nombreCapa == "verticales":
            etiquetaField = " "
            colorCapa = QColor(255,153,0)
        elif nombreCapa == "cves_verticales":
            etiquetaField = "clave"
            colorCapa = QColor(255,153,0)

        type(data)
        srid = QSettings().value("srid")
        inSpatialRef = osr.SpatialReference()
        inSpatialRef.ImportFromEPSG(int(srid))
        outSpatialRef = osr.SpatialReference()
        outSpatialRef.ImportFromEPSG(int(srid))
        coordTrans = osr.CoordinateTransformation(inSpatialRef, outSpatialRef)
        if not bool(data):
            raise Exception('Error')

        #Obtenemos todos los atributos del JSON
        if data['features'] == []:
            return
        keys = list(data['features'][0]['properties'].keys())
        properties = []
        geoms = []
        for feature in data['features']:
            geom = feature['geometry']
            property = feature['properties']
            geom = json.dumps(geom)
            geometry = ogr.CreateGeometryFromJson(geom)
            geometry.Transform(coordTrans)
            geoms.append(geometry.ExportToWkt())
            l = []
            for i in range(0, len(keys)):
                l.append(property[keys[i]])
            properties.append(l)

        mem_layer = QgsProject.instance().mapLayersByName(nombreCapa)

        if len(mem_layer) != 1:
            raise AttributeError
        mem_layer = mem_layer[0]

        prov = mem_layer.dataProvider()
        feats = [ QgsFeature() for i in range(len(geoms)) ]

        for i, feat in enumerate(feats):
            feat.setAttributes(properties[i])
            feat.setGeometry(QgsGeometry.fromWkt(geoms[i]))

        prov.addFeatures(feats)
        
        settings = QgsPalLayerSettings()
        settings.fieldName = 'id || clave'
        print (settings.maxNumLabels)
        settings.centroidWhole = True

        textFormat = QgsTextFormat()
        textFormat.setColor(colorCapa)
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')

        settings.setFormat(textFormat)

        labeling = QgsVectorLayerSimpleLabeling(settings)
        mem_layer.setLabeling(labeling)
        mem_layer.setLabelsEnabled(True)

        mem_layer.triggerRepaint()

        mem_layer.commitChanges()
        mem_layer.triggerRepaint()

####################################################################################################

    def vaciarCapa(self, nombreCapa):

        mem_layer = QgsProject.instance().mapLayersByName(nombreCapa)

        if len(mem_layer) != 1:
            raise AttributeError
        mem_layer = mem_layer[0]
        
        #Obtenemos los fields antes de eliminar las features
        inFields = mem_layer.dataProvider().fields()
        #Habilitamos opcion de editado
        mem_layer.startEditing()
        #Iteramos para eliminar Features
        for f in mem_layer.getFeatures():
            mem_layer.deleteFeature(f.id())
        
        #Reasignamos los fields al VectorLayer
        mem_layer.dataProvider().addAttributes(inFields.toList())
        #Guardamos los cambios
        mem_layer.commitChanges()

###################################################################################

    def zoomManzana(self):
    
        # self.canvas = QgsMapCanvas()

        mem_layer = QgsProject.instance().mapLayersByName('manzana')

        if len(mem_layer) != 1:
            raise AttributeError
     
        mem_layer = mem_layer[0]

        if mem_layer == None:
            return

        features = list(mem_layer.getFeatures())
        f = features[0]
        bbox = f.geometry().boundingBox()
        iface.mapCanvas().setExtent(bbox)
        iface.mapCanvas().refresh()

############################################################################################

    def obtenerAPintar(self, nombreCapa):

        url = ' '

        if nombreCapa == "manzana":
            url = self.urlManzanas
        elif nombreCapa == "predios":
            url = self.urlPredios
        elif nombreCapa == "construcciones":
            url = self.urlConstrucciones
        elif nombreCapa == "horizontales":
            url = self.urlHorizontales
        elif nombreCapa == "verticales":
            url = self.urlVerticales
        elif nombreCapa == "cves_verticales":
            url = self.urlClavesV

        #idManzana = self.dockwidget.comboManzana.currentText()
        try:
            response = requests.post(url + self.idManzana, headers = self.headers, data = self.payload)
        except requests.exceptions.RequestException:
             raise RuntimeError('Error de servidor')
             return
        data = ""
        if response.status_code == 200:
            data = response.content
        else:
            raise Exception('Error en peticion:\n' + response.text)

        return json.loads(data)


        #Metodo que crea un elemento QMessageBox
    
#########################################################################################################
    
    def createAlert(self, mensaje, icono, titulo):
        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()