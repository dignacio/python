# -*- coding: utf-8 -*-
"""
/***************************************************************************
 actualizacioncatastralv2
                                 A QGIS plugin
 actualizacioncatastralv2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-02-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by actualizacioncatastralv2
        email                : actualizacioncatastralv2
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSettings
from PyQt5.QtGui import QIcon, QColor, QCursor, QPixmap
from PyQt5.QtWidgets import QAction, QMessageBox
from PyQt5 import QtWidgets
# Initialize Qt resources from file resources.py
from .resources import *
from qgis.core import *
from qgis.utils import iface
from qgis.gui import QgsLayerTreeView

# Import the code for the DockWidget
from .actualizacioncatastralv2_dockwidget import actualizacioncatastralv2DockWidget
from .Cedula_MainWindow import CedulaMainWindow
import os.path
import os, json, requests
from osgeo import ogr, osr

class actualizacioncatastralv2:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'actualizacioncatastralv2_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&actualizacioncatastralv2')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'actualizacioncatastralv2')
        self.toolbar.setObjectName(u'actualizacioncatastralv2')

        #print "** INITIALIZING actualizacioncatastralv2"

        self.pluginIsActive = False
        self.dockwidget = None
        self.dockwidget = actualizacioncatastralv2DockWidget()

        self.dockwidget.botonEditar.clicked.connect(self.guardarCambio)
        self.dockwidget.botonCargar.clicked.connect(self.pintarCapas)

        # -- DAVID, evento boton de abrir cedula --
        self.dockwidget.btnAbrirCedula.clicked.connect(self.abrirCedula)
        # -- DAVID, evento boton de cancelar apertura de cedula --
        self.dockwidget.btnCancelAperCedula.clicked.connect(self.cancelarCedula)
        # -- DAVID, canvas --
        self.canvas = iface.mapCanvas()
        # -- DAVID, diseño del cursor --
        self.cursorRedondo = QCursor(QPixmap(["16 16 3 1",
                                "      c None",
                                ".     c #FF0000",
                                "+     c #FFFFFF",
                                "                ",
                                "       +.+      ",
                                "      ++.++     ",
                                "     +.....+    ",
                                "    +.     .+   ",
                                "   +.   .   .+  ",
                                "  +.    .    .+ ",
                                " ++.    .    .++",
                                " ... ...+... ...",
                                " ++.    .    .++",
                                "  +.    .    .+ ",
                                "   +.   .   .+  ",
                                "   ++.     .+   ",
                                "    ++.....+    ",
                                "      ++.++     ",
                                "       +.+      "]))
        # -- DAVID, diseño del cursor --
        self.abrePredio = False
        # -- DAVID, lista -- 
        self.lista = {}

    #Configuracion

    # -- DAVID, metodo boton de abrir cedula --
    def abrirCedula(self):
        self.iface.actionSelect().trigger()
        self.canvas.setCursor(self.cursorRedondo)
        self.dockwidget.btnAbrirCedula.setEnabled(False)
        self.abrePredio = True

    # -- DAVID, metodo boton de cancelar apertura de cedula --
    def cancelarCedula(self):
        self.iface.actionSelect().trigger()
        self.dockwidget.btnAbrirCedula.setEnabled(True)
        self.abrePredio = False
        self.cambiarStatusCedula("Cancelado...", "")

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('actualizacioncatastralv2', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/actualizacioncatastralv2/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'actualizacioncatastralv2'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING actualizacioncatastralv2"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

########################################################################################################

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD actualizacioncatastralv2"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&actualizacioncatastralv2'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

 ########################################################################################################

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING actualizacioncatastralv2"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = actualizacioncatastralv2DockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            self.cuerpo = {"incluirGeom": "true", "pagina": None, "bbox": "false", "pin": "false", "geomWKT": None, "epsg": None, "properties": {}, "epsgGeomWKT": None, "itemsPagina": None, "nombre": "x"}
            self.headers = {'Content-Type': 'application/json'}
            self.payload = json.dumps(self.cuerpo)

            #Inicializacionde IdManzana
            self.idManzana = ' '

            #Modo desarrollor
            self.modoDesarrollo = False
            
            #Configuracion
            #self.servidorIP = 'http://192.168.0.39:1093/'
            self.servidorIP = 'http://127.0.0.1:1093/'
            self.urlManzanas = self.servidorIP + 'api/manzana/'
            self.urlPredios = self.servidorIP + 'api/manzana/predios/'
            self.urlConstrucciones = self.servidorIP + 'api/manzana/construcciones/'
            self.urlHorizontales = self.servidorIP + 'api/manzana/deptoh/'
            self.urlVerticales = self.servidorIP + 'api/manzana/deptov/'
            self.urlClavesV = self.servidorIP + 'api/manzana/deptovcve/'
            self.urlTiposConst = self.servidorIP + 'api/cat/const/esp/'

            #Acciones iniciales
            if self.modoDesarrollo:
                self.obtenerIdManzana()
                self.pintarCapas()

            else:
                self.obtenerLocalidades()
                self.dockwidget.comboLocalidad.currentIndexChanged.connect(self.obtenerSectoresPorLocalidad)
                self.dockwidget.comboSector.currentIndexChanged.connect(self.obtenerManzanasPorSector)
                self.dockwidget.comboManzana.currentIndexChanged.connect(self.obtenerIdManzana)
            
            
            

            # -- DAVID, cambio a self --
            #Asignar eventos de cambio de seleccion
            self.capaManzana = QgsProject.instance().mapLayersByName('manzana')[0]
            self.capaPrediosGeom = QgsProject.instance().mapLayersByName('predios.geom')[0]
            self.capaPrediosNum = QgsProject.instance().mapLayersByName('predios.num')[0]
            self.capaConstrucciones = QgsProject.instance().mapLayersByName('construcciones')[0]
            self.capaHorizontalesGeom = QgsProject.instance().mapLayersByName('horizontales.geom')[0]
            self.capaHorizontalesNum = QgsProject.instance().mapLayersByName('horizontales.num')[0]
            self.capaVerticales = QgsProject.instance().mapLayersByName('verticales')[0]
            self.capaCvesVert = QgsProject.instance().mapLayersByName('cves_verticales')[0]

            self.capaManzana.selectionChanged.connect(self.cargarTablita)
            self.capaPrediosGeom.selectionChanged.connect(self.cargarTablita)
            self.capaPrediosNum.selectionChanged.connect(self.cargarTablita)
            self.capaConstrucciones.selectionChanged.connect(self.cargarTablita)
            self.capaHorizontalesGeom.selectionChanged.connect(self.cargarTablita)
            self.capaHorizontalesNum.selectionChanged.connect(self.cargarTablita)
            self.capaVerticales.selectionChanged.connect(self.cargarTablita)
            self.capaCvesVert.selectionChanged.connect(self.cargarTablita)

            

            

#######################################################################################################################
    

    #validar posicion valida de combo
    def validarCombox(self):
        return (self.dockwidget.comboLocalidad.count() > 0 and self.dockwidget.comboSector.count() > 0 and self.dockwidget.comboManzana.count()) or self.modoDesarrollo

##########################################################################
    def obtenerIdManzana(self):
        
        #Obtener el identificador de la manzana
        if self.modoDesarrollo:
            #self.idManzana = '102800'  #Muchas manzanas
            #self.idManzana = '071061'  #Manzana corta
            #self.idManzana = '002055'  #Manzana estandar
            #self.idManzana = '030015'
            self.idManzana = '065003'   #Manzana Estandar sin horizontales
            #self.idManzana = '007021'

        else:
            index = self.dockwidget.comboManzana.currentIndex()
            self.idManzana = self.dockwidget.comboManzana.itemData(index)
        
########################################################################################################################

    #Llenar primer combo
    def obtenerLocalidades(self):

        self.dockwidget.comboLocalidad.clear()

        try:
            #print(self.servidorIP + 'api/combo/ixtlahuaca/localidades/')
            respuesta = requests.get(self.servidorIP + 'api/combo/ixtlahuaca/localidades/')
        except requests.exceptions.RequestException:
            raise RuntimeError('Error de servidor')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            for localidad in respuesta.json():
                self.dockwidget.comboLocalidad.addItem(str(localidad['label']) + " " + localidad['other'], str(localidad['value']) )
        else:
            self.createAlert("No existen localidades registradas", QMessageBox().Information, "Cargar Localidades")

        #self.obtenerSectoresPorLocalidad()


#################################################################################################################################

    #Llenar segundo combo
    def obtenerSectoresPorLocalidad(self):

        if self.dockwidget.comboLocalidad.count() > 0:

            index = self.dockwidget.comboLocalidad.currentIndex()
            idSector = self.dockwidget.comboLocalidad.itemData(index)
            
            self.dockwidget.comboSector.clear()

            try:
                respuesta = requests.get(self.servidorIP +  'api/combo/localidades/' + idSector + '/sector/')
            except requests.exceptions.RequestException:
                raise RuntimeError('Error de servidor')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:

                for sector in respuesta.json():
                    self.dockwidget.comboSector.addItem(sector['label'], sector['value']) #Cambiar value por label
            else:
                self.createAlert("No existen sectores en la localidad", QMessageBox().Information, "Cargar Sectores")
            
            #self.obtenerManzanasPorSector()

################################################################################################################################

    #Llenar tercer combo
    def obtenerManzanasPorSector(self):
    
        if self.dockwidget.comboSector.count() > 0:

            index = self.dockwidget.comboSector.currentIndex()
            idSector = self.dockwidget.comboSector.itemData(index)

            self.dockwidget.comboManzana.clear()

            try:
                respuesta = requests.get(self.servidorIP +  'api/combo/sector/' + idSector + '/manzana/')
            except requests.exceptions.RequestException:
                raise RuntimeError('Error de servidor')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                for manzana in respuesta.json():
                    self.dockwidget.comboManzana.addItem(manzana['label'], manzana['other'])#Cambiar other por label
            else:
                self.createAlert("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")

##################################################################################################
    
    #Pintar todas las capas
    def pintarCapas(self):

        #try:
        if self.validarCombox():

            self.vaciarCapa('manzana')
            self.vaciarCapa('predios.geom')
            self.vaciarCapa('predios.num')
            self.vaciarCapa('construcciones')
            self.vaciarCapa('horizontales.geom')
            self.vaciarCapa('horizontales.num')
            self.vaciarCapa('verticales')
            self.vaciarCapa('cves_verticales')

            self.pintarUnaCapa('manzana')
            self.pintarUnaCapa('predios.geom')
            self.pintarNum('predios.num')
            #self.pintarUnaCapa('construcciones')
            #self.pintarUnaCapa('horizontales.geom')
            #self.pintarNum('horizontales.num')
            #self.pintarUnaCapa('verticales')
            #self.pintarUnaCapa('cves_verticales')
            self.zoomManzana()

            print ("Capas cargadas con exito")

        else:
            self.createAlert('No se han seleccionado manzanas para cargar', QMessageBox.Critical, 'Capas de consulta')

        #except AttributeError:
        #    self.createAlert('No se han cargado las capas', QMessageBox.Critical, 'Capas de consulta')

########################################################################################################

    def pintarUnaCapa(self, nombreCapa):
        
        print ("Cargando... " + nombreCapa)
        data = self.obtenerAPintar(nombreCapa)
        
        type(data)
        srid = QSettings().value("srid")
        inSpatialRef = osr.SpatialReference()
        inSpatialRef.ImportFromEPSG(int(srid))
        outSpatialRef = osr.SpatialReference()
        outSpatialRef.ImportFromEPSG(int(srid))
        coordTrans = osr.CoordinateTransformation(inSpatialRef, outSpatialRef)
        if not bool(data):
            raise Exception('Error')

        #Obtenemos todos los atributos del JSON
        if data['features'] == []:
            return

        varKeys = data['features'][0]['properties']

        keys = list(varKeys.keys())
        properties = []
        geoms = []
        for feature in data['features']:
            geom = feature['geometry']
            
            property = feature['properties']
            geom = json.dumps(geom)
            geometry = ogr.CreateGeometryFromJson(geom)
            geometry.Transform(coordTrans)
            geoms.append(geometry.ExportToWkt())
            l = []
            for i in range(0, len(keys)):
                l.append(property[keys[i]])
            properties.append(l)

        mem_layer = QgsProject.instance().mapLayersByName(nombreCapa)[0]

        prov = mem_layer.dataProvider()
        feats = [ QgsFeature() for i in range(len(geoms)) ]

        for i, feat in enumerate(feats):
            feat.setAttributes(properties[i])
            feat.setGeometry(QgsGeometry.fromWkt(geoms[i]))

        prov.addFeatures(feats)
        

####################################################################################################

    def pintarNum(self, nombreCapa):

        print ("Cargando... " + nombreCapa)
        data = self.obtenerAPintar(nombreCapa)
        etiquetaField = ""
        colorCapa = ""
        if nombreCapa == "predios.num":
            etiquetaField = "num_ext"
            colorCapa = QColor(0,255,0)
        elif nombreCapa == "horizontales.num":
            etiquetaField = "num_ofi"
            colorCapa = QColor(198,140,33)

        type(data)
        srid = QSettings().value("srid")
        inSpatialRef = osr.SpatialReference()
        inSpatialRef.ImportFromEPSG(int(srid))
        outSpatialRef = osr.SpatialReference()
        outSpatialRef.ImportFromEPSG(int(srid))
        coordTrans = osr.CoordinateTransformation(inSpatialRef, outSpatialRef)
        if not bool(data):
            raise Exception('Error')

        #Obtenemos todos los atributos del JSON
        if data['features'] == []:
            return

        varKeys = data['features'][0]['properties']

        keys = list(varKeys.keys())
        properties = []
        polys = []
        listNum = []

        for feature in data['features']:
            wkt = feature['properties']['geom_num']
            listNum.append(feature['properties'][etiquetaField])
            property = feature['properties']
            gem = QgsGeometry.fromWkt(wkt)
            polys.append(gem)

        mem_layer = QgsProject.instance().mapLayersByName(nombreCapa)[0]
        mem_layer.startEditing()

        prov = mem_layer.dataProvider()
        feats = [ QgsFeature() for i in range(len(polys)) ]

        for i, feat in enumerate(feats):  
            feat.setGeometry(polys[i])
            prov.addFeature(feat)
            mem_layer.changeAttributeValue(feat.id(), 0, listNum[i])

            
        mem_layer.commitChanges()

        settings = QgsPalLayerSettings()
        settings.fieldName = etiquetaField
        settings.enabled = True
        settings.isExpression = False
        
        settings.centroidWhole = True

        textFormat = QgsTextFormat()
        textFormat.setColor(colorCapa)
        textFormat.setSize(8)
        textFormat.setNamedStyle('Bold')

        settings.setFormat(textFormat)

        #settings.placement= QgsPalLayerSettings.OverPoint
        labeling = QgsVectorLayerSimpleLabeling(settings)

        mem_layer.setLabeling(labeling)
        mem_layer.setLabelsEnabled(True)

        
        mem_layer.triggerRepaint()




#####################################################################################################

    def vaciarCapa(self, nombreCapa):

        mem_layer = QgsProject.instance().mapLayersByName(nombreCapa)

        if len(mem_layer) != 1:
            raise AttributeError
        mem_layer = mem_layer[0]
        
        #Obtenemos los fields antes de eliminar las features
        inFields = mem_layer.dataProvider().fields()
        #Habilitamos opcion de editado
        mem_layer.startEditing()
        #Iteramos para eliminar Features
        for f in mem_layer.getFeatures():
            mem_layer.deleteFeature(f.id())
        
        #Reasignamos los fields al VectorLayer
        mem_layer.dataProvider().addAttributes(inFields.toList())
        #Guardamos los cambios
        mem_layer.commitChanges()

###################################################################################

    def zoomManzana(self):
    
        # self.canvas = QgsMapCanvas()

        mem_layer = QgsProject.instance().mapLayersByName('manzana')

        if len(mem_layer) != 1:
            raise AttributeError
     
        mem_layer = mem_layer[0]

        if mem_layer == None:
            return

        features = list(mem_layer.getFeatures())
        f = features[0]
        bbox = f.geometry().boundingBox()
        iface.mapCanvas().setExtent(bbox)
        iface.mapCanvas().refresh()

############################################################################################

    def obtenerAPintar(self, nombreCapa):

        url = ' '

        if nombreCapa == "manzana":
            url = self.urlManzanas
        elif nombreCapa == "predios.geom" or nombreCapa == "predios.num":
            url = self.urlPredios
        elif nombreCapa == "construcciones":
            url = self.urlConstrucciones
        elif nombreCapa == "horizontales.geom" or nombreCapa == "horizontales.num":
            url = self.urlHorizontales
        elif nombreCapa == "verticales":
            url = self.urlVerticales
        elif nombreCapa == "cves_verticales":
            url = self.urlClavesV

        #idManzana = self.dockwidget.comboManzana.currentText()
        try:
            response = requests.post(url + self.idManzana, headers = self.headers, data = self.payload)
        except requests.exceptions.RequestException:
            self.createAlert("Error de servidor", QMessageBox().Critical, "Error de servidor")
            return
        data = ""
        if response.status_code == 200:
            data = response.content
        else:
            raise Exception('Error en peticion:\n' + response.text)

        return json.loads(data)


        #Metodo que crea un elemento QMessageBox
    
#########################################################################################################
    
    def cargarTablita(self):
        self.capaActiva = iface.activeLayer()
        self.vaciarTablita()
        
        self.comboConstEsp = QtWidgets.QComboBox()
        #for t in self.tiposConstEsp:
        #        self.comboConstEsp.addItem(t)


        header = self.dockwidget.tablaEdicion.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        #header.setStretchLastSection(True)

        respuesta = requests.get(self.urlTiposConst)
        diccionarioConst = {}
        if respuesta.status_code == 200:
            for clave in respuesta.json():
                self.comboConstEsp.addItem(str(clave['cveConstEsp']) + " - " + clave['descripcion'], str(clave['cveConstEsp']) )
                diccionarioConst[clave['cveConstEsp']] = str(clave['cveConstEsp']) + " - " + clave['descripcion']
        else:
            self.createAlert("No se han podido cargar los tipos de construccion especial\nError de servidor", QMessageBox().Critical, "Cargar tipos de construccion especial")

    


        self.dockwidget.labelCapaEdicion.setText('---')
        if self.capaActiva == None:
            #self.createAlert("No tienes ninguna capa activa", QMessageBox().Critical, 'Edicion de atributos')
            self.cambiarStatus("No se ha seleccionado ninguna capa", "error")

            
        else:

            self.seleccion = self.capaActiva.selectedFeatures()

            self.dockwidget.labelCapaEdicion.setText(self.capaActiva.name())
            
            if (len(self.seleccion) == 1):

                self.cambiarStatus("Edicion Activa", "ok")
                campos = self.capaActiva.fields()   
                nombres = [campo.name() for campo in campos]
                self.tipConst = 0

                if self.capaActiva.name() == 'manzana':
                    self.listaAtributos = ['clave']
                elif self.capaActiva.name() == 'predios.geom':
                    self.listaAtributos = ['clave']
                elif self.capaActiva.name() == 'predios.num':
                    self.listaAtributos = ['num_ext']
                elif self.capaActiva.name() == 'construcciones':
                    ixIdTipoConst = campos.lookupField('id_tipo_construccion')
                    ixCveConstEsp = campos.lookupField('cve_const_esp')
                    self.tipConst = self.seleccion[0].attributes()[ixIdTipoConst]
                    if  self.tipConst == 2:
                        self.listaAtributos = ['nom_volumen', 'cve_const_esp']
                    else:
                        self.listaAtributos = ['nom_volumen', 'num_niveles']
                elif self.capaActiva.name() == 'horizontales.geom':
                    self.listaAtributos = ['clave']
                elif self.capaActiva.name() == 'horizontales.num':
                    self.listaAtributos = ['num_ofi']
                elif self.capaActiva.name() == 'verticales':
                    self.listaAtributos = ['clave']
                elif self.capaActiva.name() == 'cves_verticales':
                    self.listaAtributos = ['clave']


                self.listaIndex = []

                for nombre in nombres:

                    if nombre in self.listaAtributos:
                        self.listaIndex.append(campos.lookupField(nombre))


                for x in range(0, len(self.listaAtributos)):
                            
                    self.dockwidget.tablaEdicion.insertRow(x)
                    item = QtWidgets.QTableWidgetItem(self.listaAtributos[x])
                    self.dockwidget.tablaEdicion.setItem(x, 0 , item)#self.capaActual.getFeatures().attributes()[x])
                    item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
                    textoItem = str( self.seleccion[0].attributes()[self.listaIndex[x]])
                    if self.tipConst == 2: 
                        if x == 1:
                            self.dockwidget.tablaEdicion.setCellWidget(1,1,self.comboConstEsp)
                            textito = self.seleccion[0].attributes()[ixCveConstEsp]
                            index = self.comboConstEsp.findText(diccionarioConst[textito], QtCore.Qt.MatchFixedString)
                            if index >= 0:
                                self.comboConstEsp.setCurrentIndex(index)
                        else:
                            self.dockwidget.tablaEdicion.setItem(x, 1 , QtWidgets.QTableWidgetItem(textoItem)) 
                    else:
                        self.dockwidget.tablaEdicion.setItem(x, 1 , QtWidgets.QTableWidgetItem(textoItem))


                

            
            else:
                self.cambiarStatus("Debes seleccionar exactamente un elemento", "error")


        # -- DAVID, abrir cedula -- 
        if self.abrePredio:

            features = self.capaPrediosGeom.selectedFeatures()
            if len(features) != 1:

                self.cambiarStatusCedula("Seleccione un solo predio", "error")

                return
            else:
                self.cambiarStatusCedula("Abriendo cedula...", "ok")
                feat = features[0]
                # abrir Cedula
                self.lista[str(feat['cve_cat'])] = CedulaMainWindow(str(feat['cve_cat']))
                #self.lista[str(feat['cve_cat'])].pushButton.clicked.connect(self.hasAlgo)
                self.lista[str(feat['cve_cat'])].setWindowTitle(str(feat['cve_cat']))
                self.lista[str(feat['cve_cat'])].show()

            self.abrePredio = False
            self.dockwidget.btnAbrirCedula.setEnabled(True)


#########################################################################################################

    def guardarCambio(self):

        if  self.dockwidget.tablaEdicion.rowCount() > 0:
                    
            #Activamos el modo de edicion
            self.capaActiva.startEditing()
            
            

            if self.capaActiva.name() != "construcciones":
                
                
                
                self.createAlert('Se guardo correctamente', QMessageBox.Information, 'Edicion de atributos')
            
            else:
                bandera = True
                if self.tipConst != 2:
                    try:
                        if int(self.dockwidget.tablaEdicion.item(1,1).text()) < 1:
                            self.createAlert("El numero de niveles debe ser uno o mas", QMessageBox.Warning, 'Edicion de atributos')
                            bandera = False
                    except Exception:
                        bandera = False
                        self.createAlert("El numero de niveles debe ser uno o mas", QMessageBox.Warning, 'Edicion de atributos')
                
                    if bandera:
                        for x in range(0, len(self.listaIndex)):

                            self.seleccion[0][self.listaIndex[x]] = self.dockwidget.tablaEdicion.item(x, 1).text()
                            

                        self.capaActiva.updateFeature(self.seleccion[0])
                        self.capaActiva.commitChanges()
                        self.createAlert('Se guardo correctamente', QMessageBox.Information, 'Edicion de atributos')

                else:
                    for x in range(0, len(self.listaIndex)):

                        if x == 1:
                            index = self.comboConstEsp.currentIndex()
                            self.seleccion[0][self.listaIndex[x]] = self.comboConstEsp.itemData(index)
                            #self.seleccion[0][self.listaIndex[x]] = self.comboConstEsp.currentText()
                        else:
                            self.seleccion[0][self.listaIndex[x]] = self.dockwidget.tablaEdicion.item(x, 1).text()
                            

                    self.capaActiva.updateFeature(self.seleccion[0])
                    self.capaActiva.commitChanges()
                    self.createAlert('Se guardo correctamente', QMessageBox.Information, 'Edicion de atributos')
                
            self.cargarTablita()
            
            self.capaActiva.commitChanges()
        else:
            self.createAlert("Necesitas seleccionar una capa", QMessageBox.Warning, 'Edicion de atributos')

#############################################################################################################################

    




    def vaciarTablita(self):
        
        self.dockwidget.tablaEdicion.clearContents()
        self.dockwidget.tablaEdicion.setRowCount(0)
            
        for row in range(0, self.dockwidget.tablaEdicion.rowCount()):        
            self.dockwidget.tablaEdicion.removeRow(row) 

###########################################################################################################################

    def cambiarStatus(self, texto, estado):

        self.dockwidget.labelStatusEdicion.setText(texto)

        if estado == "ok":
            self.dockwidget.labelStatusEdicion.setStyleSheet('color: green')
        elif estado == "error":
            self.dockwidget.labelStatusEdicion.setStyleSheet('color: red')
        elif estado == "warning":
            self.dockwidget.labelStatusEdicion.setStyleSheet('color: yellow')

    def cambiarStatusCedula(self, texto, estado):

        self.dockwidget.lbEstatusCedula.setText(texto)

        if estado == "ok": # abriendo
            self.dockwidget.lbEstatusCedula.setStyleSheet('color: green')
        elif estado == "error": # Seleccione un solo predio
            self.dockwidget.lbEstatusCedula.setStyleSheet('color: red')
        else:
            self.dockwidget.lbEstatusCedula.setStyleSheet('color: black')


    def createAlert(self, mensaje, icono, titulo):
        #Create QMessageBox
        self.msg = QMessageBox()
        #Add message
        self.msg.setText(mensaje)
        #Add icon of critical error
        self.msg.setIcon(icono)
        #Add tittle
        self.msg.setWindowTitle(titulo)
        #Show of message dialog
        self.msg.show()
         # Run the dialog event loop
        result = self.msg.exec_()