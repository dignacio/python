# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CedulaPadron
                                 A QGIS plugin
 CedulaPadron
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-20
        git sha              : $Format:%H$
        copyright            : (C) 2018 by CedulaPadron
        email                : CedulaPadron
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py

# Import the code for the dialog
from .CedulaPadron_dialog import CedulaPadronDialog
import os.path

from PyQt5 import QtWidgets
from PyQt5 import QtCore
# Initialize Qt resources from file resources.py
import os.path
from qgis.utils import *
import os, json, requests
from osgeo import ogr, osr

class CedulaPadron:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, pluginM):
        
        self.iface = iface
        self.dlg = CedulaPadronDialog()
        self.cveCatastral = ''
        self.pluginM = pluginM
    
    def run(self, cveCatastral):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        self.cveCatastral = cveCatastral
        
        self.consultarPadron()

    def consultarPadron(self):
        try:
            headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginM.pluginM.UTI.obtenerToken()}

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.pluginM.pluginM.UTI.obtenerToken()}
                response = requests.get(self.pluginM.pluginM.CFG.urlObtenerIdPredio + self.cveCatastral, headers = headers)
            except requests.exceptions.RequestException as e:
                self.pluginM.pluginM.UTI.mostrarAlerta(str(respuesta), QMessageBox().Critical, "Consulta de padron")
                return

            if response.status_code == 200:
                data = response.content
                idPadron = str(response.json())
            else:
                self.pluginM.pluginM.UTI.mostrarAlerta(str(respuesta), QMessageBox().Critical, "Consulta de padron")
                return
            
            print(idPadron)

            respuesta = requests.get(self.pluginM.pluginM.CFG.urlGetPadron + idPadron, headers = headers)

            if respuesta.status_code == 200:
                
                datos = respuesta.json()[0]

                #UBICACION
                self.dlg.fldCveCatPad.setText(str(datos["cveCatastral"]))
                self.dlg.fldCveCatAntPad.setText(str(datos["cveCatastralInicial"]))
                self.dlg.fldCPPad.setText(str(datos["eCp"]))
                self.dlg.fldAsentPad.setText(str(datos["tipoAsentamientoHumano"]))
                self.dlg.fldColPad.setText(str(datos["eUbColonia"]))
                self.dlg.fldLocPad.setText(str(datos["localidad"]))
                self.dlg.fldPredPad.setText(str(datos["tipoPredio"]))
                self.dlg.fldMunPad.setText(str(datos["cveMunicipio"]))
                self.dlg.fldRegPad.setText(str(datos["regimenProp"]))
                self.dlg.fldRevPad.setText(str(datos["eActualizaPor"]))
                self.dlg.fldFecPad.setText(str(datos["eFechaActualizacion"]))
                self.dlg.lblNomPad.setText(str(datos["nombreEdificio"]))
                self.dlg.fldCallPad.setText(str(datos["eUbCalle"]))

                #TERRENO
                self.dlg.fldSueloPad.setText(str(datos["giroUsoSuelo"]))
                self.dlg.fldFondoPad.setText(str(datos["eFondo"]))
                self.dlg.fldFrentePad.setText(str(datos["eFrente"]))
                self.dlg.fldOriPad.setText(str(datos["ubicacionPredioManzana"]))

                #COMPARATIVO
                self.dlg.fldSupTerPrivPad.setText(str(datos["eSupTerPriv"]))
                self.dlg.fldSupTerComPad.setText(str(datos["eSupTerComun"]))
                self.dlg.fldSupTerTotPad.setText(str(datos["eSupTerCarto"]))
                self.dlg.fldSupConstPrivPad.setText(str(datos["eSupConstPriv"]))
                self.dlg.fldSupConstComPad.setText(str(datos["eSupConstComun"]))
                self.dlg.fldSupConstTotPad.setText(str(datos["eSupConstCarto"]))
                self.dlg.fldValTerrPad.setText(str(datos["eValorTer"]))
                self.dlg.fldValConstPad.setText(str(datos["eValorConst"]))
                self.dlg.fldValCatPad.setText(str(datos["eValorCat"]))
                self.dlg.fldIndPad.setText(str(datos["eIndiviso"]))

            else:
                self.pluginM.pluginM.UTI.mostrarAlerta(str(respuesta), QMessageBox().Critical, "Consulta de padron")

        except requests.exceptions.RequestException:
            self.pluginM.pluginM.UTI.mostrarAlerta(str(respuesta), QMessageBox().Critical, "Consulta de padron")

