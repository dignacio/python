# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AsignacionCampo
                                 A QGIS plugin
 AsignacionCampo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-21
        git sha              : $Format:%H$
        copyright            : (C) 2018 by AsignacionCampo
        email                : AsignacionCampo
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from PyQt5 import QtCore
from PyQt5 import QtWidgets
# Initialize Qt resources from file resources.py

# Import the code for the dialog
from .AsignacionCampo_dialog import AsignacionCampoDialog
import os.path

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from qgis.core import *
import os.path
import os, json, requests
from osgeo import ogr, osr
from .VentanaAsignacionCampo import VentanaAsignacionCampo

class AsignacionCampo:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, UTI):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AsignacionCampo_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = AsignacionCampoDialog()
        self.dlg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        self.UTI = UTI

        self.modeloLocalidad = QStandardItemModel()
        self.enviosLocalidad = []
        self.modeloSector = QStandardItemModel()
        self.enviosSector = []
        self.modeloManzana = QStandardItemModel()
        self.enviosManzana = []

        self.clavesIzq = []
        self.clavesDer = {}

        self.dlg.cmbLocalidad.currentIndexChanged.connect(self.obtenerSectoresPorLocalidad)
        self.dlg.cmbSector.currentIndexChanged.connect(self.obtenerManzanasPorSector)
        self.dlg.cmbManzana.currentIndexChanged.connect(self.contactarPintarCampos)
        
        self.VentanaLiberacion = VentanaAsignacionCampo(iface)
        self.dlg.btnLiberarAsig.clicked.connect(self.llamaLiberarAsignaciones)

        self.dlg.btnMas.clicked.connect(self.pasarDerecha)
        self.dlg.btnMenos.clicked.connect(self.pasarIzquierda)

        self.dlg.chkTodoClaves.stateChanged.connect(self.marcarTodoClaves)
        self.dlg.chkTodoMazPred.stateChanged.connect(self.marcarTodoMazPred)
        self.dlg.tablaMazPred.hideColumn(0)
        #print(self.dlg.cmbLocalidad.x())
        #self.dlg.cmbLocalidad.show()
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AsignacionCampo')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'AsignacionCampo')
        self.toolbar.setObjectName(u'AsignacionCampo')
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AsignacionCampo', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/AsignacionCampo/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'AsignacionCampo'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AsignacionCampo'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        #self.obtenerLocalidades()
        
        self.capaPredios = QgsProject.instance().mapLayer(self.ACA.obtenerIdCapa('predios.geom'))
        #self.contactarPintarCampos()
        self.obtenerLocalidades()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass

#_-------------------------------------------------------------------------------------------------

    def obtenerLocalidades(self):

        self.dlg.cmbLocalidad.clear()

        try:
            headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
            respuesta = requests.get(self.CFG.urlLocalidades, headers = headers)
        except requests.exceptions.RequestException:
            self.UTI.mostrarAlerta("Error de servidor", QMessageBox().Critical, "Cargar Localidades")
            print('ERROR: LOC000')

        lenJson = len(list(respuesta.json()))

        if lenJson > 0:
            listaTemp = ['--Selecciona--']
            
            self.enviosLocalidad = ['-']
            for localidad in respuesta.json():
                listaTemp.append(str(localidad['label']) + " " + localidad['other'])
                self.enviosLocalidad.append(str(localidad['value']))

            modeloTemp = QStandardItemModel()
            for i,word in enumerate( listaTemp ):   
                
                item = QStandardItem(word)
                modeloTemp.setItem(i, 0, item)

            
            self.UTI.extenderCombo(self.dlg.cmbLocalidad, self.completarLocalidad, modeloTemp)
            self.dlg.cmbLocalidad.model().item(0).setEnabled(False)
        else:
            self.dlg.cmbLocalidad.setEnabled(False)
            self.dlg.cmbLocalidad.clear()
            self.dlg.cmbSector.setEnabled(False)
            self.dlg.cmbSector.clear()
            self.dlg.cmbManzana.setEnabled(False)
            self.dlg.cmbManzana.clear()
            self.clavesIzq = []
            self.llaveManzana = None
            self.vaciarTabla(self.dlg.tablaClaves)
            self.UTI.mostrarAlerta("No existen localidades registradas", QMessageBox().Information, "Cargar Localidades")

#-----------------------------------------------------------------------------------------

    #Llenar segundo combo
    def obtenerSectoresPorLocalidad(self):
        index = self.dlg.cmbLocalidad.currentIndex()
        
        if self.dlg.cmbLocalidad.count() > 0 and index > 0:

            index = self.dlg.cmbLocalidad.currentIndex()
            idSector = self.enviosLocalidad[index]
            
            self.dlg.cmbSector.clear()

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(self.CFG.urlSectores + idSector + '/sector/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor", QMessageBox().Critical, "Cargar Sectores")
                print('ERROR: SEC000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                listaTemp = ['--Selecciona--']
                self.enviosSector = ['-']
                for sector in respuesta.json():
                    listaTemp.append(sector['label'])
                    self.enviosSector.append(sector['value'])
                modeloTemp = QStandardItemModel()
                for i,word in enumerate( listaTemp ):   
                    
                    item = QStandardItem(word)
                    modeloTemp.setItem(i, 0, item)

                
                self.UTI.extenderCombo(self.dlg.cmbSector, self.completarSector, modeloTemp)
                self.dlg.cmbSector.model().item(0).setEnabled(False)
                self.dlg.cmbSector.setEnabled(True)
            else:
                self.dlg.cmbSector.setEnabled(False)
                self.dlg.cmbSector.clear()
                self.dlg.cmbManzana.setEnabled(False)
                self.dlg.cmbManzana.clear()
                self.clavesIzq = []
                self.vaciarTabla(self.dlg.tablaClaves)
                self.llaveManzana = None

                self.UTI.mostrarAlerta("No existen sectores en la localidad", QMessageBox().Information, "Cargar Sectores")

#--------------------------------------------------------------------------------------------------------------

    def obtenerManzanasPorSector(self):
    
        index = self.dlg.cmbSector.currentIndex()
        if self.dlg.cmbSector.count() > 0 and index > 0:

            index = self.dlg.cmbSector.currentIndex()
            idSector = self.enviosSector[index]

            self.dlg.cmbManzana.clear()

            try:
                headers = {'Content-Type': 'application/json', 'Authorization' : self.UTI.obtenerToken()}
                respuesta = requests.get(self.CFG.urlManzanas + idSector + '/manzana/', headers = headers)
            except requests.exceptions.RequestException:
                self.UTI.mostrarAlerta("Error de servidor", QMessageBox().Critical, "Cargar Manzanas")
                print('ERROR: MAN000')

            lenJson = len(list(respuesta.json()))

            if lenJson > 0:
                listaTemp = ['--Selecciona--']
                self.enviosManzana = ['-']
                for manzana in respuesta.json():
                    listaTemp.append(manzana['label'])
                    self.enviosManzana.append(manzana['other'])
                modeloTemp = QStandardItemModel()
                for i,word in enumerate( listaTemp ):   
                    
                    item = QStandardItem(word)
                    modeloTemp.setItem(i, 0, item)

                
                self.UTI.extenderCombo(self.dlg.cmbManzana, self.completarManzana, modeloTemp)
                self.dlg.cmbManzana.model().item(0).setEnabled(False)
                self.dlg.cmbManzana.setEnabled(True)
            else:
                self.dlg.cmbManzana.setEnabled(False)
                self.dlg.cmbManzana.clear()
                self.clavesIzq = []
                self.vaciarTabla(self.dlg.tablaClaves)
                self.llaveManzana = None
                self.UTI.mostrarAlerta("No existen manzanas en el sector", QMessageBox().Information, "Cargar Manzanas")

#---------------------------------------------------------------------------------------------------------------

    def contactarPintarCampos(self):
        index = self.dlg.cmbManzana.currentIndex()
        if self.validarCombox and index > 0:
            self.ACA.obtenerXCapas()
            cuerpo = {"incluirGeom": "true", "pagina": None, "bbox": "false", "pin": "false", "geomWKT": None, "epsg": None, "properties": None, "epsgGeomWKT": None, "itemsPagina": None, "nombre": "x"}
            payload = json.dumps(cuerpo)
            self.ACA.payload = payload
            index = self.dlg.cmbManzana.currentIndex()
            self.ACA.idManzana = self.enviosManzana[index]
            self.llaveManzana = self.enviosManzana[index]
            self.ACA.pintarCapasCampo()

            keysDer = list(self.clavesDer.keys())
            self.clavesIzq = []
            if self.llaveManzana in keysDer:
                for predio in self.capaPredios.getFeatures():
                    cveCat = predio['clave']
                    if not cveCat in self.clavesDer[self.llaveManzana]:
                        self.clavesIzq.append(cveCat)

            else:
                self.clavesDer[self.llaveManzana] = []
                for predio in self.capaPredios.getFeatures():
                    cveCat = predio['clave']
                    self.clavesIzq.append(cveCat)

            self.clavesIzq.sort()
            self.actualizarTablas()
#----------------------------------------------------------------------------------------------------------------

    def validarCombox(self):
        return (self.dlg.cmbLocalidad.count() > 0 and self.dlg.cmbSector.count() > 0 and self.dlg.cmbManzana.count() >0)

#--------------------------------------------------------------------------------------------------------------------

    def actualizarTablas(self):
        self.llenarTablaIzquierda()
        self.llenarTablaDerecha()

#--------------------------------------------------------------------------------------------------------
    def llenarTablaIzquierda(self):
        
        self.vaciarTabla(self.dlg.tablaClaves)

        #for clave in listaClaves:
        for x in range(0, len(self.clavesIzq)):
            self.dlg.tablaClaves.insertRow(x)

            item = QtWidgets.QTableWidgetItem(self.clavesIzq[x])
            item.setFlags( QtCore.Qt.ItemIsUserCheckable |  QtCore.Qt.ItemIsEnabled )
            item.setCheckState(QtCore.Qt.Unchecked)
            self.dlg.tablaClaves.setItem(x, 0 , item)


#-------------------------------------------------------------------------------------------------

    def llenarTablaDerecha(self):
        
        self.vaciarTabla(self.dlg.tablaMazPred)
        keysDer = list(self.clavesDer.keys())
        for key in keysDer:

            listaKey = self.clavesDer[key]
            print('agregamos ', key, listaKey)
            for x in range(0, len(listaKey)):
                
                rowCount = self.dlg.tablaMazPred.rowCount()
                self.dlg.tablaMazPred.insertRow(rowCount)
                rowCount = self.dlg.tablaMazPred.rowCount()

                item = QtWidgets.QTableWidgetItem(str(key))
                self.dlg.tablaMazPred.setItem(rowCount-1, 0 , item)
                item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )

                item = QtWidgets.QTableWidgetItem(str(key)[-3:])
                self.dlg.tablaMazPred.setItem(rowCount-1, 1 , item)
                item.setFlags( QtCore.Qt.ItemIsUserCheckable |  QtCore.Qt.ItemIsEnabled )
                item.setCheckState(QtCore.Qt.Unchecked)

                item = QtWidgets.QTableWidgetItem(str(listaKey[x]))
                self.dlg.tablaMazPred.setItem(rowCount-1, 2 , item)
                item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled )
                
#-------------------------------------------------------------------------------------------------------

    def pasarDerecha(self):

        indexSel = []
        for c in range(0, self.dlg.tablaClaves.rowCount()):
            if self.dlg.tablaClaves.item(c, 0 ).checkState() == QtCore.Qt.Checked:
                indexSel.append(c)
        
        if len(indexSel) > 0:
            listaQuitados = []
            for index in indexSel:
                item = self.clavesIzq[index]
                listaQuitados.append(item)
                self.clavesDer[self.llaveManzana].append(item)
            
            for quitado in listaQuitados:
                self.clavesIzq.remove(quitado)
                
            self.clavesDer[self.llaveManzana].sort()
            self.dlg.chkTodoClaves.setCheckState(QtCore.Qt.Unchecked)
            self.actualizarTablas()

#---------------------------------------------------------------------------------------------------

    def pasarIzquierda(self):
        indexSel = []
        for c in range(0, self.dlg.tablaMazPred.rowCount()):
            if self.dlg.tablaMazPred.item(c, 1 ).checkState() == QtCore.Qt.Checked:
                indexSel.append(c)

        if len(indexSel) >0:

            for index in indexSel:
                key = str(self.dlg.tablaMazPred.item(index, 0).text())
                data = str(self.dlg.tablaMazPred.item(index, 2).text())
                self.clavesDer[str(key)].remove(str(data))
            
                if key == self.llaveManzana:
                    self.clavesIzq.append(data)

            self.dlg.chkTodoMazPred.setCheckState(QtCore.Qt.Unchecked)
            self.clavesIzq.sort()
            self.actualizarTablas()

#----------------------------------------------------------------------------------------------------

    def marcarTodoClaves(self):
        if self.dlg.chkTodoClaves.checkState() == QtCore.Qt.Checked:
            if self.dlg.tablaClaves.rowCount() > 0:
                for c in range(0, self.dlg.tablaClaves.rowCount()):
                    self.dlg.tablaClaves.item(c, 0 ).setCheckState(QtCore.Qt.Checked)
            else:
                self.dlg.chkTodoClaves.setCheckState(QtCore.Qt.Unchecked)
        else:
            for c in range(0, self.dlg.tablaClaves.rowCount()):
                self.dlg.tablaClaves.item(c, 0 ).setCheckState(QtCore.Qt.Unchecked)

#----------------------------------------------------------------------------------------------------

    def marcarTodoMazPred(self):
        if self.dlg.chkTodoMazPred.checkState() == QtCore.Qt.Checked:
            if self.dlg.tablaMazPred.rowCount() > 0:
                for c in range(0, self.dlg.tablaMazPred.rowCount()):
                    self.dlg.tablaMazPred.item(c, 1 ).setCheckState(QtCore.Qt.Checked)
            else:
                self.dlg.chkTodoMazPred.setCheckState(QtCore.Qt.Unchecked)
        else:
            for c in range(0, self.dlg.tablaMazPred.rowCount()):
                self.dlg.tablaMazPred.item(c, 1 ).setCheckState(QtCore.Qt.Unchecked)                

#------------------------------------------------------------------------------------------------

    def desmarcarCheckTodoClaves(self):
        for c in range(0, self.dlg.tablaClaves.rowCount()):
            if self.dlg.tablaClaves.item(c, 0 ).checkState() == QtCore.Qt.Unchecked:
                self.dlg.chkTodoClaves.setCheckState(QtCore.Qt.Unchecked)
                break

#-----------------------------------------------------------------------------------------------------------

    def desmarcarCheckTodoMazPred(self):
        for c in range(0, self.dlg.tablaMazPred.rowCount()):
            if self.dlg.tablaMazPred.item(c, 0 ).checkState() == QtCore.Qt.Unchecked:
                self.dlg.chkTodoMazPred.setCheckState(QtCore.Qt.Unchecked)
                break

#------------------------------------------------------------------------------------------------------------
    def vaciarTabla(self, tabla):
        tabla.clearContents()
        tabla.setRowCount(0)
            
        for row in range(0, tabla.rowCount()):        
            tabla.removeRow(row) 

#-------------------------------------------------------------------------------------------------------------------

    def llamaLiberarAsignaciones(self):
        self.VentanaLiberacion.run()

#--------------------------------------------------------------------------------------------------------------

    def completarLocalidad(self, text):
        
        if text:
            index = self.dlg.cmbLocalidad.findText(text)
            self.dlg.cmbLocalidad.setCurrentIndex(index)

#----------------------------------------------------------------------------------------------------------------------

    def completarSector(self, text):
        
        if text:
            index = self.dlg.cmbSector.findText(text)
            self.dlg.cmbSector.setCurrentIndex(index)

#---------------------------------------------------------------------------------------------------------------------

    def completarManzana(self, text):
        
        if text:
            index = self.dlg.cmbManzana.findText(text)
            self.dlg.cmbManzana.setCurrentIndex(index)

#---------------------------------------------------------------------------------------------------

    def completarUsuario(self, text):
        
        if text:
            index = self.dlg.cmbUsuario.findText(text)
            self.dlg.cmbUsuario.setCurrentIndex(index)

#----------------------------------------------------------------------------------------------------------